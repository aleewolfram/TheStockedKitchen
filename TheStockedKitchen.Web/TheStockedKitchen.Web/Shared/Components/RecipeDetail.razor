@using TheStockedKitchen.Client;
@using TheStockedKitchen.Web.Shared.Components;
@using TheStockedKitchen.Web.Shared.Dialogs;

@inject ITheStockedKitchenClient _apiClient
@inject IDialogService _dialogService

@if (Loading)
{
    <LoadingSpinner />
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-6 ma-2" Elevation="3">
                <MudGrid>
                    <MudItem xs="12" md="6" Class="d-flex justify-center align-center">
                        <MudImage ObjectFit="ObjectFit.Cover" Fluid="true" Src="@RecipeDetailVM.Image" Elevation="25" Class="rounded-lg" />
                    </MudItem>
                    <MudItem xs="12" md="6" Class="d-flex justify-center align-center">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">@RecipeDetailVM.Title</MudText>
                            </MudItem>
                            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                                <MudItem xs="12">
                                    <MudText Typo="Typo.overline">@((MarkupString)RecipeDetailVM.Summary)</MudText>
                                </MudItem>
                            </MudHidden>
                        </MudGrid>
                    </MudItem>

                        <MudItem xs="12" md="6">
                            @if (ShowUndoMarkRecipeAsMadeError)
                        {
                            <MudItem xs="12">
                                <StatusMessage Color="Color.Error" Message="@Message" Icon="@Icons.Material.Outlined.Error" />
                            </MudItem>
                        }
                        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                            <MudItem xs="12" Class="pt-4 pb-4 d-flex">
                                <MudButton Color="Color.Info" StartIcon="@Icons.Material.Filled.Link" Variant="Variant.Text" Href="@(RecipeDetailVM.SourceUrl)">View Source</MudButton>
                                <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.LocalDining" Variant="Variant.Text" OnClick="MarkRecipeAsMadeAndUpdateFoodItemQuantityAsync">Mark As Made</MudButton>
                            </MudItem>
                        </MudHidden>
                        <MudItem xs="12">
                            <MudDataGrid Items="@(RecipeDetailVM.IngredientCompareVMs)" Breakpoint="Breakpoint.Md" Filterable="false">
                                <Columns>
                                    <PropertyColumn Title="Pantry Ingredients Used" Property="s => s.RecipeIngredientName" Sortable="false" />
                                    <TemplateColumn Sortable="false">
                                        <CellTemplate>
                                            @if (!context.Item.WasAbleToCompare)
                                            {
                                                <MudTooltip Text="Not able to auto convert this ingredient." Placement="Placement.Top">
                                                    @context.Item.PantryIngredientQuantity @context.Item.PantryIngredientUnit <MudIcon Icon="@Icons.Material.Filled.ArrowForward" />  <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Color="@Color.Error" />
                                                </MudTooltip>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.body2">
                                                    @context.Item.PantryIngredientQuantity @context.Item.PantryIngredientUnit <MudIcon Icon="@Icons.Material.Filled.ArrowForward" />  @context.Item.PantryIngredientRemainingQuantity @context.Item.PantryIngredientRemainingUnit
                                                </MudText>
                                            }
                                        </CellTemplate>
                                    </TemplateColumn>
                                    <TemplateColumn CellClass="d-flex" Sortable="false">
                                        <CellTemplate>
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="@(context.Item.WasAbleToCompare ? Color.Default : Color.Info)"></MudIconButton>
                                        </CellTemplate>
                                    </TemplateColumn>
                                </Columns>
                            </MudDataGrid>
                        </MudItem>
                        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                            <MudItem xs="12" Class="pt-4 d-flex justify-end">
                                <MudButton Color="Color.Info" StartIcon="@Icons.Material.Filled.Link" Variant="Variant.Text" Href="@(RecipeDetailVM.SourceUrl)">View Source</MudButton>
                                @if (ShowUndoMarkRecipeAsMadeButton)
                                {
                                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.NoMeals" Variant="Variant.Text">Undo Mark As Made</MudButton>
                                }
                                else
                                {
                                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.LocalDining" Variant="Variant.Text" OnClick="MarkRecipeAsMadeAndUpdateFoodItemQuantityAsync">Mark As Made</MudButton>
                                }
                            </MudItem>
                        </MudHidden>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public RecipeVM RecipeVM { get; set; }
    [Parameter]
    public List<FoodStock> FoodStocks { get; set; }

    private RecipeDetailVM RecipeDetailVM { get; set; }
    private List<FoodStock> UsedFoodStocks { get; set; }
    private IEnumerable<Unit> Units { get; set; }
    private MudForm Form = new MudForm();

    private bool Loading { get; set; }
    private bool Success { get; set; }
    private bool ShowUndoMarkRecipeAsMadeButton { get; set; }
    private bool ShowUndoMarkRecipeAsMadeError { get; set; }

    private string Message { get; set; } = "";

    private int RecipeMadeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        RecipeDetailVM = await _apiClient.GetRecipeDetailAsync(RecipeVM);
        Units = await _apiClient.GetUnitsAsync();

        Loading = false;
    }

    private async Task MarkRecipeAsMadeAsync()
    {
        await Form.Validate();

        if (Success)
        {
            int recipeMadeId = await _apiClient.MarkRecipeAsMadeAsync(RecipeVM);

            if (recipeMadeId == -1)
            {
                ShowUndoMarkRecipeAsMadeError = true;
                Message = "Error marking recipe as made. Please try again.";
                StateHasChanged();
                await Task.Delay(4000);
                ShowUndoMarkRecipeAsMadeError = false;
            }
        }
    }

    private async Task MarkRecipeAsMadeAndUpdateFoodItemQuantityAsync()
    {
        await Form.Validate();

        if (Success)
        {
            RecipeMadeId = await _apiClient.MarkRecipeAsMadeAsync(RecipeVM);

            if (RecipeMadeId != -1)
            {
                await UpdateFoodStockQuantityAsync();
            }
            else
            {
                ShowUndoMarkRecipeAsMadeError = true;
                Message = "Error marking recipe as made. Quantity has not been updated. Please try again.";
                StateHasChanged();
                await Task.Delay(4000);
                ShowUndoMarkRecipeAsMadeError = false;
            }
        }
    }

    private async Task UpdateFoodStockQuantityAsync()
    {
        bool success = await _apiClient.UpdateFoodStockQuantityAsync(RecipeDetailVM.IngredientCompareVMs);

        if (!success)
        {
            ShowUndoMarkRecipeAsMadeError = true;
            Message = "Error updating those ingredients. Please try again.";
            StateHasChanged();
            await Task.Delay(4000);
            ShowUndoMarkRecipeAsMadeError = false;
        }
    }
}