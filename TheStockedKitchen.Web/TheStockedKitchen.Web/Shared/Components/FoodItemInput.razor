@using TheStockedKitchen.Client;

@inject ITheStockedKitchenClient _apiClient

@if (Loading)
{
    <LoadingSpinner />
}
else if (ShowError)
{
    <SadToastyError />
}
else
{
    <MudGrid Class="pb-5">
        <MudItem xs="12">
            <MudText Typo="Typo.h6">@FoodStockVM.Name</MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudNumericField HideSpinButtons="true" @bind-Value="FoodStockVM.Quantity" Label="Quantity" Variant="Variant.Outlined" Min="0.0" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSelect @bind-Value="@FoodStockVM.Unit" T="string" Label="Unit" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                @foreach (Unit unit in Units.Where(u => u.AllowedInDropDown == true))
                {
                    <MudSelectItem Value="@unit.Name" />

                }
            </MudSelect>
        </MudItem>
    </MudGrid>
}


@code {
    [Parameter]
    public FoodStockVM FoodStockVM
    {
        get => FoodStockVMValue;
        set
        {
            if (FoodStockVMValue == value) return;
            FoodStockVMValue = value;
            FoodStockVMChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<FoodStockVM> FoodStockVMChanged { get; set; }

    FoodStockVM FoodStockVMValue { get; set; } = new FoodStockVM();
    private IEnumerable<Unit> Units { get; set; }

    private bool Loading { get; set; }
    private bool ShowError { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        try
        {
            Units = await _apiClient.GetUnitsAsync();
        }
        catch (Exception)
        {
            ShowError = true;
            Loading = false;
        }

        Loading = false;
    }
}
