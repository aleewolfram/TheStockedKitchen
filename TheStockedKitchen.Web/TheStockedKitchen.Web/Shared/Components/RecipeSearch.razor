@using TheStockedKitchen.Client;
@using TheStockedKitchen.Web.Shared.Components;

@inject ITheStockedKitchenClient _apiClient

@if (Loading)
{
    <LoadingSpinner />
}
else
{
    <MudGrid>
        @if (FoodStocks.Any())
        {
            <MudItem xs="12">
                <MudDropContainer T="FoodStock" Items="FoodStocks" ItemsSelector="@((f,dropzone) => (f.IncludedInRecipeSearch ? "Yes" : "No") == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
                    <ChildContent>
                        <MudPaper Class="ma-4 flex-grow-1" Elevation="3">
                            <MudListSubheader Class="mt-4 pb-2 mud-typography-overline site-text-large">Excluded From Recipe Search</MudListSubheader>
                            <MudChipSet MultiSelection="true" Filter="false" ReadOnly="true">
                                <MudDropZone Class="d-flex flex-wrap flex-grow-1 pa-6 rounded" T="FoodStock" Identifier="No" AllowReorder="true" />
                            </MudChipSet>
                        </MudPaper>
                        <MudPaper Class="ma-4 flex-grow-1" Elevation="3">
                            <MudListSubheader Class="mt-4 pb-2 mud-typography-overline site-text-large">Included In Recipe Search</MudListSubheader>
                            <MudChipSet MultiSelection="true" Filter="false" ReadOnly="true">
                                <MudDropZone Class="d-flex flex-wrap flex-grow-1 pa-6 rounded" T="FoodStock" Identifier="Yes" AllowReorder="true" />
                            </MudChipSet>
                        </MudPaper>
                    </ChildContent>
                    <ItemRenderer>
                        <MudChip Text="@(context.Name)" Color="@Color.Primary" Default="@(!context.IncludedInRecipeSearch)" />
                    </ItemRenderer>
                </MudDropContainer>
            </MudItem>
        }

        <MudItem xs="12">
            @if (RecipeVMs != null && RecipeVMs.Any())
            {
                <PaperMessage>
                    @if (ShowMadeRecipesMessage)
                    {
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.overline">No recipes found. Here are some previously made recipes you might like.</MudText>
                            </MudItem>
                        </MudGrid>
                    }
                    <MudGrid>
                        @foreach (RecipeVM recipeVM in RecipeVMs.OrderBy(r => r.MissingIngredientsCount).ThenByDescending(r => r.Likes).ThenBy(r => r.Title))
                        {
                            <MudItem xs="12" sm="4" md="3">
                                <MudCard>
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.body1">@(recipeVM.Title)</MudText>
                                            </CardHeaderContent>
                                            <CardHeaderActions>
                                                @if (recipeVM.TimesMade > 0)
                                            {
                                                <MudTooltip Text="@("You have made this " + recipeVM.TimesMade + " time(s) before." )" Placement="Placement.Top">
                                                    <MudBadge Content="@(recipeVM.TimesMade)" Overlap="true" Class="mx-6 my-4" Color="Color.Primary">
                                                        <MudIconButton Icon="@Icons.Material.Filled.LocalDining" Color="Color.Default" />
                                                    </MudBadge>
                                                </MudTooltip>
                                            }
                                            else if (recipeVM.Likes > 0)
                                            {
                                                <MudTooltip Text="@("Liked by " + recipeVM.Likes + "others." )" Placement="Placement.Top">
                                                    <MudBadge Content="@(recipeVM.Likes)" Overlap="true" Class="mx-6 my-4" Color="Color.Primary">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Info" />
                                                    </MudBadge>
                                                </MudTooltip>

                                            }
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardMedia Image="@(recipeVM.Image)" />
                                    <MudCardContent>
                                        @if (recipeVM.MissingIngredients?.Any() ?? false)
                                        {
                                            <MudText Typo="Typo.overline">Missing Ingredients: @(string.Join(", ", recipeVM.MissingIngredients.Select(i => i.Name)))</MudText>
                                        }
                                        else if (recipeVM.MissingIngredients != null)
                                        {
                                            <MudText Typo="Typo.overline">You have all ingredients!</MudText>
                                        }
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudTooltip Text="View">
                                            <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Info" OnClick="() => ShowRecipeDetail(recipeVM)" />
                                        </MudTooltip>
                                        @if (recipeVM.MissingIngredients?.Any() ?? false || recipeVM.UsedIngredients == null)
                                        {
                                            <MudTooltip Text="Shop Missing Ingredients">
                                                <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Primary" />
                                            </MudTooltip>
                                        }
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                </PaperMessage>
            }
            else
            {
                @if(ShowSearchRecipesError)
                {
                    <SadToastyError/>
                }
                else
                {
                    <PaperMessage>
                        <MudGrid>
                            <MudItem xs="11">
                                <MudText Typo="Typo.overline">No recipes found. Go add some ingredients to your pantry.</MudText>
                            </MudItem>
                            <MudItem xs="1">
                                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowForward" Href="/pantry" Size="Size.Small" />
                            </MudItem>
                        </MudGrid>
                    </PaperMessage>
                }
            }
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public EventCallback<RecipeVM> ViewRecipeEvent { get; set; }
    [Parameter]
    public List<FoodStock> FoodStocks { get; set; }

    private List<RecipeVM> RecipeVMs { get; set; }

    private bool Loading { get; set; }
    private bool ShowSearchRecipesError { get; set; }
    private bool ShowMadeRecipesMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        await GetRecipes();

        Loading = false;
    }

    private async Task GetRecipes()
    {
        if (FoodStocks.Where(f => f.IncludedInRecipeSearch == true).Any())
        {
            try
            {
                RecipeVMs = (await _apiClient.GetRecipesAsync(string.Join(", ", FoodStocks.Where(f => f.IncludedInRecipeSearch == true).Select(f => f.Name)))).ToList();

                if (!RecipeVMs.Any())
                {
                    RecipeVMs = await _apiClient.GetRecipesMadeAsync();
                    if (RecipeVMs.Any())
                    {
                        ShowMadeRecipesMessage = true;
                    }
                }
            }
            catch(Exception e)
            {
                ShowSearchRecipesError = true;
            }
        }
        else
        {
            RecipeVMs = new List<RecipeVM>();
        }
    }

    private async Task ItemUpdated(MudItemDropInfo<FoodStock> dropItem)
    {
        bool success = await _apiClient.ToggleFoodStockIncludedInRecipeAsync(dropItem.Item.FoodStockId);
        if (success)
        {
            dropItem.Item.IncludedInRecipeSearch = (dropItem.DropzoneIdentifier == "Yes" ? true : false);
            await GetRecipes();
        }
    }

    private async Task ShowRecipeDetail(RecipeVM recipeVM)
    {
        await ViewRecipeEvent.InvokeAsync(recipeVM);
    }
}
