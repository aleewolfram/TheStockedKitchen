@using TheStockedKitchen.Client;
@using TheStockedKitchen.Web.Shared.Components;

@inject ITheStockedKitchenClient _apiClient

<MudDialog>
    <DialogContent>
        <MudContainer Class="container-dialog">
            @if (ShowDataGrid)
            {
                <MudGrid>
                    @if (ShowAddFoodItemStatus)
                    {
                        <MudItem xs="12">
                            <StatusMessage Color="@Color" Message="@Message" Icon="@Icon" />
                        </MudItem>
                    }
                    <FoodSearchBar FoodSearch="@Search" SearchEvent="(string s) => SearchFoodItemsAsync(s)" />
                    <MudItem xs="12">
                        @if (Loading)
                        {
                            <LoadingSpinner />
                        }
                        else
                        {
                            <MudDataGrid Items="@FoodDataVMs" Hover="true" SortLabel="Sort By">
                            <Columns>
                                <HierarchyColumn T="FoodDataVM" ButtonDisabledFunc="@(f => !f.FoodNutrients.Any())" />
                                <PropertyColumn Property="f => f.Name" />
                                <PropertyColumn Title="Food Category" Property="f => f.FoodCategory" />
                                <TemplateColumn CellClass="d-flex justify-end">
                                    <CellTemplate>
                                        <MudStack Row>
                                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(() => OpenAddFoodItemFormAsync(context.Item))" />
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <ChildRowContent>
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    @foreach (FoodNutrientVM foodNutrient in context.Item.FoodNutrients.OrderBy(n => n.UnitName))
                                        {
                                            <MudText>@foodNutrient.Name : @foodNutrient.Value @foodNutrient.UnitName </MudText>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            </ChildRowContent>
                            <PagerContent>
                                <MudTablePager />
                            </PagerContent>
                        </MudDataGrid>
                        }
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <FoodItemInput @bind-FoodStockVM="@FoodStockVM" />
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        @if (!ShowDataGrid)
        {
            <MudButton OnClick="ToggleGrid">Back</MudButton>
            <MudButton Color="Color.Primary" OnClick="AddFoodItemAsync">Add</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string Search { get; set; }

    private IEnumerable<FoodDataVM> FoodDataVMs { get; set; }
    private Color Color { get; set; } = Color.Success;
    private FoodStockVM FoodStockVM { get; set; } = new FoodStockVM();

    private double Quantity { get; set; }

    private string Icon { get; set; } = Icons.Material.Outlined.Check;
    private string Message { get; set; } = "";

    private bool Loading { get; set; }
    private bool ShowDataGrid { get; set; } = true;
    private bool ShowAddFoodItemStatus { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        FoodDataVMs = await _apiClient.GetFoodDataAsync(Search);

        Loading = false;
    }

    private async Task SearchFoodItemsAsync(string foodSearch)
    {
        Loading = true;

        Search = foodSearch;
        FoodDataVMs = await _apiClient.GetFoodDataAsync(foodSearch);

        Loading = false;
    }

    private async Task OpenAddFoodItemFormAsync(FoodDataVM foodData)
    {
        FoodStockVM.Name = foodData.Name;
        FoodStockVM.Quantity = 0;
        FoodStockVM.Unit = "";
        ToggleGrid();
    }

    private async Task AddFoodItemAsync()
    {
        bool success = await _apiClient.AddFoodStockAsync(FoodStockVM);

        ToggleGrid();
        ShowAddFoodItemStatus = true;

        if(success)
        {
            Message = "Food item was added to your pantry.";
            Color = Color.Success;
            Icon = Icons.Material.Outlined.Check;
        }
        else
        {
            Message = "Error adding food item. Please try again.";
            Color = Color.Error;
            Icon = Icons.Material.Outlined.Error;
        }

        StateHasChanged();
        await Task.Delay(4000);
        ShowAddFoodItemStatus = false;
    }

    private void ToggleGrid()
    {
        ShowDataGrid = !ShowDataGrid;
    }

    private void Cancel() => MudDialog.Cancel();
}
