@using TheStockedKitchen.Client;
@using TheStockedKitchen.Web.Shared.Components;

@inject ITheStockedKitchenClient _apiClient

<MudDialog >
    <DialogContent>
        @if (EditMode)
        {
            <PantryQuantityInput IngredientCompareVM="@EditIngredientCompareVM" />
        }
        else
        {
            <MudGrid Class="pb-5 d-flex justify-center">
                <MudItem xs="10">
                    <MudDataGrid Items="@IngredientCompareVMs" Breakpoint="Breakpoint.Md" Filterable="false">
                        <Columns>
                            <PropertyColumn Title="Pantry Ingredients Used" Property="s => s.RecipeIngredientName" Sortable="false" />
                            <TemplateColumn Sortable="false">
                                <CellTemplate>
                                    @if (!context.Item.WasAbleToCompare)
                                    {
                                        <MudTooltip Text="Not able to auto convert this ingredient." Placement="Placement.Top">
                                            @context.Item.PantryIngredientQuantity @context.Item.PantryIngredientUnit <MudIcon Icon="@Icons.Material.Filled.ArrowForward" />  <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Color="@Color.Warning" />
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2">
                                            @context.Item.PantryIngredientQuantity @context.Item.PantryIngredientUnit <MudIcon Icon="@Icons.Material.Filled.ArrowForward" />  @context.Item.PantryIngredientRemainingQuantity @context.Item.PantryIngredientRemainingUnit
                                        </MudText>
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn CellClass="d-flex" Sortable="false">
                                <CellTemplate>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="@(context.Item.WasAbleToCompare ? Color.Default : Color.Info)" OnClick="() => EditQuantity(context.Item)"></MudIconButton>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        @if (EditMode)
        {
            <MudButton Color="Color.Default" OnClick="() => EditMode = false">Cancel</MudButton>
            <MudButton Color="Color.Default" OnClick="UpdateIngredientCompareVM">Update Item</MudButton>
        }
        else
        {
            <MudButton Color="Color.Default" OnClick="MarkRecipeAsMadeAsync">Skip Updating Pantry</MudButton>
            <MudButton Color="Color.Primary" OnClick="MarkRecipeAsMadeAndUpdateFoodItemQuantityAsync">Update Pantry</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public RecipeVM RecipeVM { get; set; }
    [Parameter]
    public List<IngredientCompareVM> IngredientCompareVMs { get; set; }

    public IngredientCompareVM EditIngredientCompareVM { get; set; }
    private IEnumerable<Unit> Units { get; set; }
    private MudForm Form = new MudForm();

    private bool Loading { get; set; }
    private bool EditMode { get; set; } = false;
    private bool Success { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        Units = await _apiClient.GetUnitsAsync();

        Loading = false;
    }

    private void EditQuantity(IngredientCompareVM ingredientCompareVM)
    {
        EditIngredientCompareVM = ingredientCompareVM;
        EditMode = true;
    }

    private void UpdateIngredientCompareVM()
    {
        int index = IngredientCompareVMs.FindIndex(i => i.PantryIngredientId != EditIngredientCompareVM.PantryIngredientId);
        EditIngredientCompareVM.WasAbleToCompare = true;
        IngredientCompareVMs[index-1] = EditIngredientCompareVM;
        EditMode = false;
    }

    private async void MarkRecipeAsMadeAsync()
    {
        await Form.Validate();

        if (Success)
        {
            int recipeMadeId = await _apiClient.MarkRecipeAsMadeAsync(RecipeVM);

            if (recipeMadeId != -1)
            {
                MudDialog.Close(DialogResult.Ok(recipeMadeId));
            }
            else
            {
                MudDialog.Close(DialogResult.Ok("Error marking recipe as made. Please try again."));
            }

            MudDialog.Close(DialogResult.Ok(""));
        }
    }

    private async void MarkRecipeAsMadeAndUpdateFoodItemQuantityAsync()
    {
        await Form.Validate();

        if (Success)
        {
            int recipeMadeId = await _apiClient.MarkRecipeAsMadeAsync(RecipeVM);

            if (recipeMadeId != -1)
            {
                await UpdateFoodStockQuantityAsync();
                MudDialog.Close(DialogResult.Ok(recipeMadeId));
            }
            else
            {
                MudDialog.Close(DialogResult.Ok("Error marking recipe as made. Quantity has not been updated. Please try again."));
            }

            MudDialog.Close(DialogResult.Ok(""));
        }
    }

    private async Task UpdateFoodStockQuantityAsync()
    {
        bool success = await _apiClient.UpdateFoodStockQuantityAsync(IngredientCompareVMs);

        if (!success)
        {
            MudDialog.Close(DialogResult.Ok("Error updating those ingredients. Please try again."));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
