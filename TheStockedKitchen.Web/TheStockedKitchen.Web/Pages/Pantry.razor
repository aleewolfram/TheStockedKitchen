@page "/pantry"
@using TheStockedKitchen.Client;
@using TheStockedKitchen.Web.Shared.Components;
@using TheStockedKitchen.Web.Shared.Dialogs;

@inject ITheStockedKitchenClient _apiClient
@inject IDialogService _dialogService

@if (Loading)
{
    <LoadingSpinner />
}

<MudGrid>
    <MudItem xs="12">
        <MudText Class="site-logo-text site-title-large" Typo="Typo.overline" Align="Align.Center" Color="Color.Primary">Pantry</MudText>
    </MudItem>
    <FoodSearchBar FoodSearch="@Search" SearchEvent="(string s) => OpenSearchFoodDialogAsync(s)" />
    <MudItem xs="12">
        <MudDataGrid Items="@FoodStock">
            <Columns>
                <PropertyColumn Property="s => s.Name" />
                <PropertyColumn Property="s => s.Quantity" />
                <PropertyColumn Property="s => s.Unit" />
            </Columns>
        </MudDataGrid>
    </MudItem>
</MudGrid>


@code {
    private bool Loading;
    private List<FoodStock> FoodStock = new List<FoodStock>();
    private string Search { get; set;}

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        FoodStock = (await _apiClient.GetFoodStockAsync()).ToList();
        Loading = false;
    }

    public async Task OpenSearchFoodDialogAsync(string foodSearch)
    {
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, ClassBackground = "blurry-dialog" };
        var parameters = new DialogParameters();
        parameters.Add(nameof(SearchFoodDialog.Search), foodSearch);

        var dialog = _dialogService.Show<SearchFoodDialog>
            ("Food Items", parameters, options);
        var result = await dialog.Result;
        if (result.Canceled)
        {
            Search = "";
            return;
        }
    }
}