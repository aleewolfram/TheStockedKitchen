@page "/recipes"
@using TheStockedKitchen.Client;
@using TheStockedKitchen.Web.Shared.Components;

@inject ITheStockedKitchenClient _apiClient
@inject NavigationManager _navigationManager

@if (Loading)
{
    <LoadingSpinner />
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Class="site-logo-text site-title-large" Typo="Typo.overline" Align="Align.Center" Color="Color.Primary">Recipes</MudText>
        </MudItem>
        @if (FoodStocks.Any())
        {
            <MudItem xs="12">
                <MudDropContainer T="FoodStock" Items="FoodStocks" ItemsSelector="@((f,dropzone) => (f.IncludedInRecipeSearch ? "Yes" : "No") == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
                    <ChildContent>
                        <MudPaper Class="ma-4 flex-grow-1" Elevation="3">
                            <MudListSubheader Class="mt-4 pb-2 mud-typography-overline site-text-large">Excluded From Recipe Search</MudListSubheader>
                            <MudChipSet MultiSelection="true" Filter="false" ReadOnly="true">
                                <MudDropZone Class="d-flex flex-wrap flex-grow-1 pa-6 rounded" T="FoodStock" Identifier="No" AllowReorder="true" />
                            </MudChipSet>
                        </MudPaper>
                        <MudPaper Class="ma-4 flex-grow-1" Elevation="3">
                            <MudListSubheader Class="mt-4 pb-2 mud-typography-overline site-text-large">Included In Recipe Search</MudListSubheader>
                            <MudChipSet MultiSelection="true" Filter="false" ReadOnly="true">
                                <MudDropZone Class="d-flex flex-wrap flex-grow-1 pa-6 rounded" T="FoodStock" Identifier="Yes" AllowReorder="true" />
                            </MudChipSet>
                        </MudPaper>
                    </ChildContent>
                    <ItemRenderer>
                        <MudChip Text="@(context.Name)" Color="@Color.Primary" Default="@(!context.IncludedInRecipeSearch)" />
                    </ItemRenderer>
                </MudDropContainer>
            </MudItem>
        }

        <MudItem xs="12">
            @if (RecipeVMs.Any())
            {
                <MudPaper Class="pa-6 ma-2" Elevation="3">
                    <MudGrid>
                        @foreach (RecipeVM recipeVM in RecipeVMs.OrderBy(r => r.MissingIngredientsCount).ThenByDescending(r => r.Likes).ThenBy(r => r.Title))
                        {
                            <MudItem xs="12" sm="4" md="3">
                                <MudCard>
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.body1">@(recipeVM.Title)</MudText>
                                            </CardHeaderContent>
                                            <CardHeaderActions>
                                                <MudBadge Content="@(recipeVM.Likes)" Overlap="true" Class="mx-6 my-4" Color="Color.Primary">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Info" />
                                                </MudBadge>
                                            </CardHeaderActions>
                                        </MudCardHeader>
                                        <MudCardMedia Image="@(recipeVM.Image)" />
                                        <MudCardContent>
                                        @if(recipeVM.MissingIngredients.Any())
                                        {
                                            <MudText Typo="Typo.overline">Missing Ingredients: @(string.Join(", ", recipeVM.MissingIngredients.Select(i => i.Name)))</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.overline">You have all ingredients!</MudText>
                                        }
                                    </MudCardContent>
                                        <MudCardActions>
                                            <MudTooltip Text="View">
                                                <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Default" OnClick="() => NavigateToRecipe(recipeVM.RecipeId)" />
                                            </MudTooltip>
                                            @if (recipeVM.MissingIngredients.Any())
                                            {
                                                <MudTooltip Text="Shop Missing Ingredients">
                                                    <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Default" />
                                                </MudTooltip>
                                            }
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                        }
                    </MudGrid>
                </MudPaper>
            }
            else
            {
                <MudPaper Class="pa-6 ma-2" Elevation="3">
                    <MudGrid>
                        <MudItem xs="11">
                            <MudText Class="" Typo="Typo.overline">No recipes found. Go add some ingredients to your pantry.</MudText>
                        </MudItem>
                        <MudItem xs="1">
                            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowForward" Href="/pantry" Size="Size.Small" />
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
}

@code {

    private List<FoodStock> FoodStocks { get; set; } = new List<FoodStock>();
    private List<RecipeVM> RecipeVMs { get; set; } = new List<RecipeVM>();

    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        FoodStocks = (await _apiClient.GetFoodStockAsync()).ToList();
        if(FoodStocks.Any())
        {
            await GetRecipes();
        }
        Loading = false;
    }

    private async Task GetRecipes()
    {
        Console.WriteLine("Searching: " + string.Join(", ", FoodStocks.Where(f => f.IncludedInRecipeSearch == true).Select(f => f.Name)));
        RecipeVMs = (await _apiClient.GetRecipesAsync(string.Join(", ", FoodStocks.Where(f => f.IncludedInRecipeSearch == true).Select(f => f.Name)))).ToList();
    }

    private async Task ItemUpdated(MudItemDropInfo<FoodStock> dropItem)
    {
        bool success = await _apiClient.ToggleFoodStockIncludedInRecipeAsync(dropItem.Item.FoodStockId);
        if(success)
        {
            dropItem.Item.IncludedInRecipeSearch = (dropItem.DropzoneIdentifier == "Yes" ? true : false);
            await GetRecipes();
        }
    }

    private void NavigateToRecipe(int id)
    {
        _navigationManager.NavigateTo($"{_navigationManager.BaseUri}recipedetails/{id}");
    }
}